{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Universi","text":"<p>Modern Stripe-like API versioning in FastAPI</p> <p> </p>"},{"location":"#installation","title":"Installation","text":"<pre><code>pip install universi\n</code></pre>"},{"location":"#who-is-this-for","title":"Who is this for?","text":"<p>Universi allows you to support a single version of your code, auto-generating the code/routes for older versions. You keep versioning encapsulated in small and independent \"version change\" modules while your business logic knows nothing about versioning.</p> <p>Its approach will be useful if you want to:</p> <ol> <li>Support many API versions for a long time</li> <li>Effortlessly backport features and bugfixes to all of your versions</li> </ol> <p>Otherwise, more conventional methods of API versioning may be preferable.</p>"},{"location":"#tutorial","title":"Tutorial","text":"<p>This guide provides a step-by-step tutorial for setting up automatic API versioning using Universi library. I will illustrate this with an example of a User API, where we will be implementing changes to a User's address.</p>"},{"location":"#a-dummy-setup","title":"A dummy setup","text":"<p>Here is an initial API setup where the User has a single address. We will be implementing two routes - one for creating a user and another for retrieving user details. We'll be using \"int\" for ID for simplicity.</p> <p>The first API you come up with usually doesn't require more than one address -- why bother?</p> <p>So we create our file with schemas:</p> <pre><code>from pydantic import BaseModel\nclass UserCreateRequest(BaseModel):\naddress: str\nclass UserResource(BaseModel):\nid: int\naddress: str\n</code></pre> <p>And we create our file with routes:</p> <pre><code>from versions.latest.users import UserCreateRequest, UserResource\nfrom universi import VersionedAPIRouter\nrouter = VersionedAPIRouter()\n@router.post(\"/users\", response_model=UserResource)\nasync def create_user(payload: UserCreateRequest):\nreturn {\n\"id\": 83,\n\"address\": payload.address,\n}\n@router.get(\"/users/{user_id}\", response_model=UserResource)\nasync def get_user(user_id: int):\nreturn {\n\"id\": user_id,\n\"address\": \"123 Example St\",\n}\n</code></pre>"},{"location":"#turning-address-into-a-list","title":"Turning address into a list","text":"<p>During our development, we have realized that the initial API design was wrong and that addresses should have always been a list because the user wants to have multiple addresses to choose from so now we have to change the type of the \"address\" field to the list of strings.</p> <pre><code>from pydantic import BaseModel\nfrom pydantic import Field\nclass UserCreateRequest(BaseModel):\naddresses: list[str] = Field(min_items=1)\nclass UserResource(BaseModel):\nid: int\naddresses: list[str]\n</code></pre> <pre><code>@router.post(\"/users\", response_model=UserResource)\nasync def create_user(payload: UserCreateRequest):\nreturn {\n\"id\": 83,\n\"addresses\": payload.addresses,\n}\n@router.get(\"/users/{user_id}\", response_model=UserResource)\nasync def get_user(user_id: int):\nreturn {\n\"id\": user_id,\n\"addresses\": [\"123 Example St\", \"456 Main St\"],\n}\n</code></pre> <p>But every user of ours will now have their API integration broken. To prevent that, we have to introduce API versioning. There aren't many methods of doing that. Most of them force you to either duplicate your schemas, your endpoints, or your entire app instance. And it makes sense, really: duplication is the only way to make sure that you will not break old versions with your new versions; the bigger the piece you duplicating -- the safer. Of course, the safest being duplicating the entire app instance and even having a separate database. But that is expensive and makes it either impossible to make breaking changes often or to support many versions. As a result, either you need infinite resources, very long development cycles, or your users will need to often migrate from version to version.</p> <p>Stripe has come up with a solution: let's have one latest app version whose responses get migrated to older versions and let's describe changes between these versions using migrations. This approach allows them to keep versions for years without dropping them. Obviously, each breaking change is still bad and each version still makes our system more complex and expensive, but their approach gives us a chance to minimize that. Additionally, it allows us backport features and bugfixes to older versions. However, you will also be backporting bugs, which is a sad consequence of eliminating duplication.</p> <p>Universi is heavily inspired by this approach so let's continue our tutorial and now try to combine the two versions we created using versioning.</p>"},{"location":"#creating-the-migration","title":"Creating the Migration","text":"<p>We need to create a migration to handle changes between these versions. For every endpoint whose <code>response_model</code> is <code>UserResource</code>, this migration will convert the list of addresses back to a single address when migrating to the previous version. Yes, migrating back: you might be used to database migrations where we write upgrade migration and downgrade migration but here our goal is to have an app of latest version and to describe what older versions looked like in comparison to it. That way the old versions are frozen in migrations and you can almost safely forget about them.</p> <pre><code>from pydantic import Field\nfrom universi.structure import (\nschema,\nVersionChange,\nconvert_response_to_previous_version_for,\n)\nclass ChangeAddressToList(VersionChange):\ndescription = (\n\"Change user address to a list of strings to \"\n\"allow the user to specify multiple addresses\"\n)\ninstructions_to_migrate_to_previous_version = (\n# You should use schema inheritance if you don't want to repeat yourself in such cases\nschema(UserCreateRequest).field(\"addresses\").didnt_exist,\nschema(UserCreateRequest).field(\"address\").existed_with(type=str, info=Field()),\nschema(UserResource).field(\"addresses\").didnt_exist,\nschema(UserResource).field(\"address\").existed_with(type=str, info=Field()),\n)\n@convert_response_to_previous_version_for(UserResource)\ndef change_addresses_to_single_item(cls, data: dict[str, Any]) -&gt; None:\ndata[\"address\"] = data.pop(\"addresses\")[0]\n@schema(UserCreateRequest).had_property(\"addresses\")\ndef addresses_property(parsed_schema):\nreturn [parsed_schema.address]\n</code></pre> <p>See how we are popping the first address from the list? This is only guaranteed to be possible because we specified earlier that <code>min_items</code> for <code>addresses</code> must be <code>1</code>. If we didn't, then the user would be able to create a user in a newer version that would be impossible to represent in the older version. I.e. If anyone tried to get that user from the older version, they would get a <code>ResponseValidationError</code> because the user wouldn't have data for a mandatory <code>address</code> field. You need to always keep in mind tht API versioning is only for versioning your API, your interface. Your versions must still be completely compatible in terms of data. If they are not, then you are versioning your data and you should really go with a separate app instance. Otherwise, your users will have a hard time migrating back and forth between API versions and so many unexpected errors.</p> <p>See how we added the <code>addresses</code> property? This simple instruction will allow us to use <code>addresses</code> even from the old schema, which means that our api route will not need to know anything about versioning. The main goal of universi is to shift the logic of versioning away from your business logic and api endpoints which makes your project easier to navigate and which makes deleting versions a breeze.</p>"},{"location":"#grouping-version-changes","title":"Grouping Version Changes","text":"<p>Finally, we group the version changes in the <code>VersionBundle</code> class. This represents the different versions of your API and the changes between them. You can add any \"version changes\" to any version. For simplicity, let's use versions 2002 and 2001 which means that we had a single address in API in 2001 and added addresses as a list in 2002's version.</p> <pre><code>from universi.structure import Version, VersionBundle\nfrom datetime import date\nfrom contextvars import ContextVar\napi_version_var = ContextVar(\"api_version_var\")\nversions = VersionBundle(\nVersion(date(2002, 1, 1), ChangeAddressToList),\nVersion(date(2001, 1, 1)),\napi_version_var=api_version_var,\n)\n</code></pre> <p>That's it. You're done with describing things. Now you just gotta ask universi to do the rest for you. We'll need the VersionedAPIRouter we used previously, our API versions, and the module representing the latest versions of our schemas.</p> <pre><code>from versions import latest, api_version_var\nfrom universi import regenerate_dir_to_all_versions, generate_all_router_versions\nregenerate_dir_to_all_versions(latest, versions)\nrouter_versions = generate_all_router_versions(\nrouter,\nversions=versions,\nlatest_schemas_module=latest,\n)\napi_version_var.set(date(2002, 1, 1))\nuvicorn.run(router_versions[date(2002, 1, 1)])\n</code></pre> <p>Universi has generated multiple things in this code:</p> <ul> <li>Three versions of our schemas: one for each API version and one that includes definitions of unions of all versions for each schema which will be useful when you want to type check that you are using requests of different versions correctly. For example, we'll have <code>UserCreateRequest</code> defined there which is a <code>TypeAlias</code> pointing to the union of 2002 version and 2001 version of <code>UserCreateRequest</code>.</li> <li>Two versions of our API router: one for each API version</li> </ul> <p>You can now just pick a router by its version and run it separately or use a parent router/app to specify the logic by which you'd like to pick a version. I recommend using a header-based router with version dates as headers. And yes, that's how Stripe does it.</p> <p>Note that universi migrates your response data based on the <code>api_version_var</code> context variable so you must set it with each request. <code>universi.get_universi_dependency</code> does that for you automatically on every request based on header value.</p> <p>Obviously, this was just a simple example and universi has a lot more features so if you're interested -- take a look at the reference.</p>"},{"location":"#examples","title":"Examples","text":"<p>Please, see tutorial examples for the fully working version of the project above.</p>"},{"location":"#important-warnings","title":"Important warnings","text":"<ol> <li>The goal of Universi is to minimize the impact of versioning on your business logic. It provides all necessary tools to prevent you from ever checking for a concrete version in your code. So please, if you are tempted to check something like <code>api_version_var.get() &gt;= date(2022, 11, 11)</code> -- please, take another look into reference section. I am confident that you will find a better solution there.</li> <li>Universi does not include a header-based router like FastAPI. We hope that soon a framework for header-based routing will surface which will allow universi to be a full versioning solution.</li> <li>I ask you to be very detailed in your descriptions for version changes. Spending these 5 extra minutes will potentially save you tens of hours in the future when everybody forgets when, how, and why the version change was made.</li> <li>We migrate responses backwards in versions from the latest version using data migration functions and requests forward in versions until the latest version using properties on pydantic models.</li> <li>Universi doesn't edit your imports when generating schemas so if you make any imports from versioned code to versioned code, I would suggest using relative imports to make sure that they will still work as expected after code generation.</li> </ol>"},{"location":"#theory","title":"Theory","text":""},{"location":"#types-of-api-versioning","title":"Types of API versioning","text":"<p>There are three ([1], [2]) main ways to version an API, each consequent being less safe but more convenient to both the API clients and maintainers. Essentially they can be classified by which layers of MVC they version.</p>"},{"location":"#1-versioning-proxy-which-points-requests-to-versioned-apps","title":"1. Versioning proxy, which points requests to versioned apps","text":"<p>This approach versions all three layers: separate data, separate business logic, separate representation. Essentially you create a completely different app for each version. Your versions are indepent and cannot in any way affect each other. You can make any sorts of changes in future versions without worrying about breaking the old ones.</p> <p>This approach is the most expensive to support but if breaking old functionality is unacceptable and if you need to support a small number of versions (1-3), then this option is viable.</p> <p>Note that this is essentially data or application versioning, not API versioning anymore. If it is impossible for your user to freely move between API versions (back and forth), then you are probably doing a bit of data versioning yourself. It can simplify your app's logic but will significantly inconvenience your users because they will not be able to easily switch API versions without waiting for your team to help. Additionally, a single client will never be able to use two versions at the same time. At least not easily.</p> <p>Mostly used in older-style apps or in critical infrastructure where no mistakes are permitted</p>"},{"location":"#2-one-router-which-points-requests-to-versioned-controllers","title":"2. One router, which points requests to versioned controllers","text":"<p>This approach versions business logic and representation layers while leaving data layer the same. You still have to duplicate all of your business logic but now your clients will be able to migrate between versions easily and you will be able to share some of the code between versions, thus lowering the amount of things you would need to duplicate.</p> <p>The problem with this method is that any refactoring will most likely have to happen in all versions at once. Any changes in the libraries they depend on will also require a change in all versions. When the number of versions starts to rise (3-5), this becomes a significant problem for the performance and morale of API maintainers.</p> <p>Popular in .NET environment and is likely the first choice of any API due to the simplicity of its implementation</p>"},{"location":"#3-one-router-shared-controllers-which-respond-with-versioned-representations","title":"3. One router, shared controllers, which respond with versioned representations","text":"<p>This approach versions only the API itself. The business logic and data below the API is the same for all versions (with rare exceptions) so API maintainers have the pleasure of maintaining only one API version while users have the added benefit that non-breaking featurees and bugfixes will automatically be ported to their version. This is the only method that allows you to support a large number of versions because it has the least amount of duplication of all methods. This is usually accomplished by adding a separate layer that builds responses out of the data that your service returns. It can be a separate service, a framework, or just a set of functions.</p> <p>Note that in this method, the usage of data versioning now becomes an inconvenience to both API users and maintainers. See, when you have a single business logic for all versions, you might need additional conditionals and checks for versions where data structure or data itself has changed. That is in addition to pre-existing incoveniences for the users. However, sometimes it might still happen so our goal is to minimize the frequency and impact of data versioning.</p> <p>Popular in API-First tech giants that have to support backwards compatibility for a long time for a large number of clients</p> <p>Note that this approach actually has two important subtypes:</p>"},{"location":"#i-duplication-based-response-building","title":"i. Duplication-based response building","text":"<p>The simplest possible builder: for each API version, we define a newr request/response builder that builds the full response for the altered API routes or migrates the user request to the latest version. It is incredibly simple to implement but is not scalable at all. Adding values to all builders will require going through all of them with the hope of not making mistakes or typos. Trying to support more than 8-12 versions with this approach will still be challenging.</p> <p>We might think of smart ways of automating this approach to support a larger number of versions. For example, to avoid duplicating the entire builder logic every time, we can pick a template builder and only define differences in child builders. Let's pick the latest-version builder as template because it will never be deprecated deleted and our developers will have the most familiarity with it. Then we need to figure out a format to define changes between builders. We can remove a field from response, add a field, change the value of a field somehow, and/or change the type of a field. We'll need some DSL to describe all possible changes.</p> <p>Then we start thinking about API route differences. How do we describe them? Or do we just duplicate all routes? Do we maybe use inheritance? No matter what we do, we'll eventually also come to a DSL, which is why some tech giants have chosen approach ii.</p>"},{"location":"#ii-migration-based-response-building","title":"ii. Migration-based response building","text":"<p>This is effectively an automated version of approach i. It has the minimal possible amount of duplication compared to all other approaches. Using a specialized DSL, we define schema migrations for changes in our request and response schemas, we define compatibility gates to migrate our data in accordance with schema changes, and we define route migrations to change/delete/add any routes.</p> <p>This is the method that Stripe and Linkedin have picked and this is the method that Universi implements for you.</p>"},{"location":"#reference","title":"Reference","text":""},{"location":"#endpoints","title":"Endpoints","text":"<p>Note that the endpoint constructor contains a second argument that describes the methods of the endpoints you would like to edit. If you have two routes for a single endpoint and you put both of their methods into the instruction -- both of them are going to be changed as you would expect.</p>"},{"location":"#defining-endpoints-that-didnt-exist-in-new-versions","title":"Defining endpoints that didn't exist in new versions","text":"<p>If you had an endpoint in old version but do not have it in a new one, you must still define it but mark it as deleted.</p> <pre><code>@router.only_exists_in_older_versions\n@router.get(\"/my_old_endpoint\")\nasync def my_old_endpoint():\n...\n</code></pre> <p>and then define it as existing in one of the older versions:</p> <pre><code>from universi.structure import VersionChange, endpoint\nclass MyChange(VersionChange):\ndescription = \"...\"\ninstructions_to_migrate_to_previous_version = (\nendpoint(\"/my_old_endpoint\", [\"GET\"]).existed,\n)\n</code></pre>"},{"location":"#defining-endpoints-that-didnt-exist-in-old-versions","title":"Defining endpoints that didn't exist in old versions","text":"<p>If you have an endpoint in your new version that must not exist in older versions, you define it as usual and then mark it as \"non-existing\" in old versions:</p> <pre><code>from universi.structure import VersionChange, endpoint\nclass MyChange(VersionChange):\ndescription = \"...\"\ninstructions_to_migrate_to_previous_version = (\nendpoint(\"/my_new_endpoint\", [\"GET\"]).didnt_exist,\n)\n</code></pre>"},{"location":"#changing-endpoint-attributes","title":"Changing endpoint attributes","text":"<p>If you want to change any attribute of your endpoint in a new version, you can return the attribute's value in all older versions like so:</p> <pre><code>from universi.structure import VersionChange, endpoint\nclass MyChange(VersionChange):\ndescription = \"...\"\ninstructions_to_migrate_to_previous_version = (\nendpoint(\"/my_endpoint\", [\"GET\"]).had(description=\"My old description\"),\n)\n</code></pre>"},{"location":"#changing-endpoint-logic-experimental","title":"Changing endpoint logic (Experimental)","text":"<p>Oftentimes you change some of the logic of your endpoint in a way that is incompatible with or not yet supported by Universi's migrations. In order to combat this, we have come up with an ugly hack that allows you to change any detail about your endpoint's arguments or logic:</p> <pre><code>from fastapi.params import Param\nfrom fastapi import Header\nclass MyVersionChange(VersionChange):\ndescription = \"...\"\ninstructions_to_migrate_to_previous_version = ()\n@endpoint(\"/users\", [\"GET\"]).was\ndef get_old_endpoint():\nfrom some_business_logic import SomeController\nasync def get_users(some_old_parameter: str = Param(), some_new_required_header: str = Header()):\nreturn SomeController(some_old_parameter, some_new_required_header)\nreturn get_users\n</code></pre> <p>As you see, it's hacky in more ways than one. Any imports to your business logic must happen within the function to prevent circular dependencies and you have to have a function within a function as a result. It is therefore not advised to use this functionality unlesss absolutely required. I recommend to instead add an issue on our github. However, if Universi definitely cannot solve your problem -- this should be your \"get out of jail free\" card.</p>"},{"location":"#dealing-with-endpoint-duplicates","title":"Dealing with endpoint duplicates","text":"<p>Sometimes, when you're doing some advanced changes in between versions, you will need to rewrite your endpoint function entirely. So essentially you'd have the following structure:</p> <pre><code>from fastapi.params import Param\nfrom fastapi.headers import Header\nfrom typing import Annotated\nfrom universi import VersionedAPIRouter\nrouter = VersionedAPIRouter()\n@router.only_exists_in_older_versions\n@router.get(\"/users\")\ndef get_users_by_name_before_we_started_using_params(user_name: Annotated[str, Header()]):\n\"\"\" Do some logic with user_name \"\"\"\n@router.get(\"/users\")\ndef get_users_by_name(user_name: Annotated[str, Param()]):\n\"\"\" Do some logic with user_name \"\"\"\n</code></pre> <p>As you see, these two functions have the same methods and paths. And when you have many versions, you can have even more functions like these two. So how do we ask universi to restore only one of them and delete the other one?</p> <pre><code>from universi.structure import VersionChange, endpoint\nclass UseParamsInsteadOfHeadersForUserNameFiltering(VersionChange):\ndescription = (\n\"Use params instead of headers for user name filtering in GET /users \"\n\"because using headers is a bad API practice in such scenarios.\"\n)\ninstructions_to_migrate_to_previous_version = (\n# We don't have to specify the name here because there's only one such deleted endpoint\nendpoint(\"/users\", [\"GET\"]).existed,\n# We do have to specify the name because we now have two existing endpoints after the instruction above\nendpoint(\"/users\", [\"GET\"], func_name=\"get_users_by_name\").didnt_exist,\n)\n</code></pre> <p>So by using a more concrete <code>func_name</code>, we are capable to distinguish between different functions that affect the same routes.</p>"},{"location":"#enums","title":"Enums","text":""},{"location":"#adding-enum-members","title":"Adding enum members","text":"<p>Note that adding enum members can be a breaking change unlike adding optional fields to a schema. For example, if I return a list of entities, each of which has some type, and I add a new type -- then my client's code is likely to break.</p> <p>So I suggest adding enum members in new versions as well.</p> <pre><code>from universi.structure import VersionChange, enum\nfrom enum import auto\nclass MyChange(VersionChange):\ndescription = \"...\"\ninstructions_to_migrate_to_previous_version = (\nenum(my_enum).had(foo=\"baz\", bar=auto()),\n)\n</code></pre>"},{"location":"#removing-enum-members","title":"Removing enum members","text":"<pre><code>from universi.structure import VersionChange, enum\nclass MyChange(VersionChange):\ndescription = \"...\"\ninstructions_to_migrate_to_previous_version = (\nenum(my_enum).didnt_have(\"foo\", \"bar\"),\n)\n</code></pre>"},{"location":"#schemas","title":"Schemas","text":""},{"location":"#add-a-field","title":"Add a field","text":"<pre><code>from pydantic import Field\nfrom universi.structure import VersionChange, schema\nclass MyChange(VersionChange):\ndescription = \"...\"\ninstructions_to_migrate_to_previous_version = (\nschema(MySchema).field(\"foo\").existed_with(type=list[str], info=Field(description=\"Foo\")),\n)\n</code></pre> <p>You can also specify any string in place of type:</p> <pre><code>schema(MySchema).field(\"foo\").existed_with(type=\"AnythingHere\")\n</code></pre> <p>It is often the case that you want to add a type that has not been imported in your schemas yet. You can use <code>import_from</code> and optionally <code>import_as</code> to do this:</p> <pre><code>schema(MySchema).field(\"foo\").existed_with(type=MyOtherSchema, import_from=\"..some_module\", import_as=\"Foo\")\n</code></pre> <p>Which will render as:</p> <pre><code>from ..some_module import MyOtherSchema as Foo\nfrom pydantic import BaseModel, Field\nclass MySchema(BaseModel):\nfoo: Foo = Field()\n</code></pre>"},{"location":"#remove-a-field","title":"Remove a field","text":"<pre><code>from universi.structure import VersionChange, schema\nclass MyChange(VersionChange):\ndescription = \"...\"\ninstructions_to_migrate_to_previous_version = (\nschema(MySchema).field(\"foo\").didnt_exist,\n)\n</code></pre>"},{"location":"#change-a-field","title":"Change a field","text":"<pre><code>from universi.structure import VersionChange, schema\nclass MyChange(VersionChange):\ndescription = \"...\"\ninstructions_to_migrate_to_previous_version = (\nschema(MySchema).field(\"foo\").had(description=\"Foo\"),\n)\n</code></pre>"},{"location":"#add-a-property","title":"Add a property","text":"<pre><code>from universi.structure import VersionChange, schema\nclass MyChange(VersionChange):\ndescription = \"...\"\ninstructions_to_migrate_to_previous_version = ()\n@schema(MySchema).had_property(\"foo\")\ndef any_name_here(parsed_schema):\n# Anything can be returned from here\nreturn parsed_schema.some_other_field\n</code></pre>"},{"location":"#remove-a-property","title":"Remove a property","text":"<pre><code>from universi.structure import VersionChange, schema\nclass MyChange(VersionChange):\ndescription = \"...\"\ninstructions_to_migrate_to_previous_version = (\nschema(MySchema).property(\"foo\").didnt_exist,\n)\n</code></pre>"},{"location":"#rename-a-schema-experimental","title":"Rename a schema (Experimental)","text":"<p>If you wish to rename your schema to make sure that its name is different in openapi.json:</p> <pre><code>from universi.structure import VersionChange, schema\nclass MyChange(VersionChange):\ndescription = \"...\"\ninstructions_to_migrate_to_previous_version = (\nschema(MySchema).had(name=\"OtherSchema\"),\n)\n</code></pre> <p>which will replace all references to this schema with the new name.</p> <p>Note also that renaming a schema should not technically be a breaking change.</p>"},{"location":"#unions","title":"Unions","text":"<p>As you probably realize, when you have many versions with different request schemas and your business logic receives one of them -- you're in trouble. You could handle them all separately by checking the version of each schema and then using the correct logic for it but universi tries to offer something better.</p> <p>Instead, we take a union of all of our request schemas and write our business logic as if it receives that union. For example, if version 2000 had field \"foo\" of type <code>str</code> and then version 2001 changed that field to type <code>int</code>, then a union of these schemas will have foo as <code>str | int</code> so your type checker will protect you against incorrect usage. Same goes for added/deleted fields. Obviously, manually importing all your schemas and then taking a union of them is tough, especially if you have many versions, which is why Universi not only generates a directory for each of your versions, but it also generates a \"unions\" directory that contains unions of all your schemas and enums.</p> <p>For example, if we had a schema named <code>MySchema</code> and two versions of it: 2000 and 2001, then the union definition will look like the following:</p> <pre><code>from ..latest import my_schema_module as latest_my_schema_module\nfrom ..v2000_01_01 import my_schema_module as v2000_01_01_my_schema_module\nfrom ..v2001_01_01 import my_schema_module as v2001_01_01_my_schema_module\nMySchema = (\nlatest_my_schema_module.MySchema |\nv2000_01_01_my_schema_module.MySchema |\nv2001_01_01_my_schema_module.MySchema\n)\n</code></pre> <p>and you would be able to use it like so:</p> <pre><code>from src.schemas.unions.my_schema_module import MySchema\nasync def the_entrypoint_of_my_business_logic(request_payload: MySchema):\n...\n</code></pre> <p>Note that this feature only affects type checking and does not affect your functionality.</p>"},{"location":"#data-conversion","title":"Data conversion","text":""},{"location":"#response-data-conversion","title":"Response data conversion","text":"<p>As described in the tutorial, universi can convert your response data into older versions. It does so by running your \"migration\" functions whenever it encounters a version change:</p> <pre><code>from universi.structure import VersionChange, convert_response_to_previous_version_for\nfrom typing import Any\nclass ChangeAddressToList(VersionChange):\ndescription = \"...\"\n@convert_response_to_previous_version_for(MyEndpointResponseModel)\ndef change_addresses_to_single_item(cls, data: dict[str, Any]) -&gt; None:\ndata[\"address\"] = data.pop(\"addresses\")[0]\n</code></pre> <p>It is done by applying <code>universi.VersionBundle.versioned(...)</code> decorator to each endpoint with the given <code>response_model</code> which automatically detects the API version by getting it from the contextvar and applying all version changes until the selected version in reverse. Note that if the version is not set, then no changes will be applied.</p> <p>If you want to convert a specific response to a specific version, you can use <code>universi.VersionBundle.migrate_response(...)</code>.</p>"},{"location":"#request-data-conversion-experimental","title":"Request data conversion (Experimental)","text":"<pre><code>from universi.structure import VersionChange, convert_request_to_next_version_for\nfrom typing import Any\nfrom my_schemas.latest import UserCreateRequest\nclass ChangeAddressToList(VersionChange):\ndescription = \"...\"\n@convert_request_to_next_version_for(UserCreateRequest)\ndef change_addresses_to_single_item(cls, data: \"UserCreateRequest2000\") -&gt; \"UserCreateRequest2001\":\nfrom my_schemas.v2000_01_01 import UserCreateRequest as UserCreateRequest2000\nfrom my_schemas.v2001_01_01 import UserCreateRequest as UserCreateRequest2001\noriginal_reqest = data.dict(by_alias=True)\noriginal_request[\"addresses\"] = [original_request.pop(\"address\")]\nreturn UserCreateRequest2001(**original_request)\n</code></pre>"},{"location":"#version-changes-with-side-effects","title":"Version changes with side effects","text":"<p>Sometimes you will use API versioning to handle a breaking change in your business logic, not in the schemas themselves. In such cases, it is tempting to add a version check and just follow the new business logic such as:</p> <pre><code>if api_version_var.get() &gt;= date(2022, 11, 11):\n# do new logic here\n</code></pre> <p>In universi, this approach is highly discouraged. It is recommended that you avoid side effects like this at any cost because each one makes your core logic harder to understand. But if you cannot, then I urge you to at least abstract away versions and versioning from your business logic which will make your code much easier to read.</p> <p>To simplify this, universi has a special <code>VersionChangeWithSideEffects</code> class. It makes finding dangerous versions that have side effects much easier and provides a nice abstraction for checking whether we are on a version where these side effects have been applied.</p> <p>As an example, let's use the tutorial section's case with the user and their address. Let's say that we use an external service to check whether user's address is listed in it and return 400 response if it is not. Let's also say that we only added this check in the newest version.</p> <pre><code>from universi.structure import VersionChangeWithSideEffects\nclass UserAddressIsCheckedInExternalService(VersionChangeWithSideEffects):\ndescription = (\n\"User's address is now checked for existense in an external service. \"\n\"If it doesn't exist there, a 400 code is returned.\"\n)\n</code></pre> <p>Then we will have the following check in our business logic:</p> <pre><code>from src.versions import versions, UserAddressIsCheckedInExternalService\nasync def create_user(payload):\nif UserAddressIsCheckedInExternalService.is_applied:\ncheck_user_address_exists_in_an_external_service(payload.address)\n...\n</code></pre> <p>So this change can be contained in any version -- your business logic doesn't know which version it has and shouldn't.</p>"},{"location":"#api-version-header-and-context-variables","title":"API Version header and context variables","text":"<p>Universi automatically converts your data to a correct version and has \"version checks\" when dealing with side effects as described in the section above. It can only do so using a special context variable that stores the current API version.</p> <p>Use <code>universi.get_universi_dependency</code> to get a <code>fastapi.Depends</code> that automatically sets this contextvar based on a header name that you pick.</p> <p>You can also set the variable yourself or even pass a different compatible contextvar to your <code>universi.VersionBundle</code> constructor.</p>"},{"location":"#similar-projects","title":"Similar projects","text":"<p>The following projects are trying to accomplish similar results with a lot more simplistic functionality.</p> <ul> <li>https://github.com/sjkaliski/pinned</li> <li>https://github.com/phillbaker/gates</li> <li>https://github.com/lukepolo/laravel-api-migrations</li> <li>https://github.com/tomschlick/request-migrations</li> </ul>"}]}